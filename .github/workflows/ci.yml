name: CI Pipeline - Stage 1

on:
  push:
    branches:
      - testing

env:
  ACR_NAME: sit72210dacr
  ACR_LOGIN_SERVER: sit72210dacr.azurecr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Images
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product-service:${{ env.IMAGE_TAG }} ./backend/product
          docker push ${{ env.ACR_LOGIN_SERVER }}/product-service:${{ env.IMAGE_TAG }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order-service:${{ env.IMAGE_TAG }} ./backend/order
          docker push ${{ env.ACR_LOGIN_SERVER }}/order-service:${{ env.IMAGE_TAG }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer-service:${{ env.IMAGE_TAG }} ./backend/customer
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer-service:${{ env.IMAGE_TAG }}
#test